[{"path":"http://klintkanopka.com/meow/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Klint Kanopka Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://klintkanopka.com/meow/articles/data-generation.html","id":"writing-your-own-data-loaders","dir":"Articles","previous_headings":"","what":"Writing your own data loaders","title":"Data Generation","text":"Data loaders encode data generating process (DGP) simulation. provide two basic data loaders, one loads pre-generated parameters responses files, one generates data according 1PL IRT model. Let‚Äôs start loader reads existing data take look core features data loader function needs participate cooperatively meow ecosystem. Interestingly enough, required inputs data loader function, ‚Äôs first thing gets called internal meow simulation. data loader can , theoretically, whatever arguments like exceptions. arguments theta, diff, resp, resp_cur, adj_mat, select_seed used, standard arguments used item selection parameter update functions. Besides , argument names generally fine can passed directly data loader named arguments meow_sim() function. First, let‚Äôs look output. can see ‚Äôs list three named components: resp, theta_tru, diff_tru. resp object dataframe item response data long form. contains three columns, containing numeric data, response matrix aligned data standard Item Response Warehouse. first, id, contains 1-indexed integer respondent id person ii. second, item, contains 1-indexed item identifier item jj. third, resp, contains simulated response person ii item jj, xijx_{ij}. dichotomous responses, use binary response variable, xij‚àà{0,1}x_{ij} \\\\{0,1\\}. Next, theta_tru object. Currently, implemented vector contains true abilities, ith element, Œ∏i\\theta_i, true ability ithi^\\text{th} respondent. near future, re-implemented dataframe easily allow multidimensional models. Finally, come diff_tru object. Currently, implemented vector contains true item difficulties, jth element, bjb_j, true difficulty jthj^\\text{th} item. near future, re-implemented dataframe easily allow IRT models beyond 1PL.","code":"data_existing <- function(   resp_path = 'data/sample-resp.csv',   theta_path = 'data/true-sample-theta.rds',   diff_path = 'data/true-sample-diff.rds' ) {   out <- list(     resp = utils::read.csv(resp_path),     theta_tru = readRDS(theta_path),     diff_tru = readRDS(diff_path)   )   return(out) }"},{"path":"http://klintkanopka.com/meow/articles/data-generation.html","id":"function-arguments","dir":"Articles","previous_headings":"","what":"Function arguments","title":"Data Generation","text":"Interestingly enough, required inputs data loader function, ‚Äôs first thing gets called internal meow simulation. data loader can , theoretically, whatever arguments like exceptions. arguments theta, diff, resp, resp_cur, adj_mat, select_seed used, standard arguments used item selection parameter update functions. Besides , argument names generally fine can passed directly data loader named arguments meow_sim() function.","code":""},{"path":"http://klintkanopka.com/meow/articles/data-generation.html","id":"return-values","dir":"Articles","previous_headings":"","what":"Return values","title":"Data Generation","text":"First, let‚Äôs look output. can see ‚Äôs list three named components: resp, theta_tru, diff_tru. resp object dataframe item response data long form. contains three columns, containing numeric data, response matrix aligned data standard Item Response Warehouse. first, id, contains 1-indexed integer respondent id person ii. second, item, contains 1-indexed item identifier item jj. third, resp, contains simulated response person ii item jj, xijx_{ij}. dichotomous responses, use binary response variable, xij‚àà{0,1}x_{ij} \\\\{0,1\\}. Next, theta_tru object. Currently, implemented vector contains true abilities, ith element, Œ∏i\\theta_i, true ability ithi^\\text{th} respondent. near future, re-implemented dataframe easily allow multidimensional models. Finally, come diff_tru object. Currently, implemented vector contains true item difficulties, jth element, bjb_j, true difficulty jthj^\\text{th} item. near future, re-implemented dataframe easily allow IRT models beyond 1PL.","code":""},{"path":"http://klintkanopka.com/meow/articles/data-generation.html","id":"the-resp-object","dir":"Articles","previous_headings":"Writing your own data loaders","what":"The $resp object","title":"Data Generation","text":"resp object dataframe item response data long form. contains three columns, containing numeric data, response matrix aligned data standard Item Response Warehouse. first, id, contains 1-indexed integer respondent id person ii. second, item, contains 1-indexed item identifier item jj. third, resp, contains simulated response person ii item jj, xijx_{ij}. dichotomous responses, use binary response variable, xij‚àà{0,1}x_{ij} \\\\{0,1\\}.","code":""},{"path":"http://klintkanopka.com/meow/articles/data-generation.html","id":"the-theta_tru-object","dir":"Articles","previous_headings":"Writing your own data loaders","what":"The $theta_tru object","title":"Data Generation","text":"Next, theta_tru object. Currently, implemented vector contains true abilities, ith element, Œ∏i\\theta_i, true ability ithi^\\text{th} respondent. near future, re-implemented dataframe easily allow multidimensional models.","code":""},{"path":"http://klintkanopka.com/meow/articles/data-generation.html","id":"the-diff_tru-object","dir":"Articles","previous_headings":"Writing your own data loaders","what":"The $diff_tru object","title":"Data Generation","text":"Finally, come diff_tru object. Currently, implemented vector contains true item difficulties, jth element, bjb_j, true difficulty jthj^\\text{th} item. near future, re-implemented dataframe easily allow IRT models beyond 1PL.","code":""},{"path":"http://klintkanopka.com/meow/articles/data-generation.html","id":"implementing-a-1pl-data-loader","dir":"Articles","previous_headings":"","what":"Implementing a 1PL data loader","title":"Data Generation","text":"Now let‚Äôs look default 1PL based data loader. code shown : function simulates data according simple inflexible DGP. takes number respondents, N_persons number items, N_items, following: Sets seed according supplied data_seed. Simulates person abilities, Œ∏i\\theta_i, ‚àà{1,...,Npersons}\\\\{1, ..., N_\\text{persons}\\} Œ∏i‚àºùí©(0,1)\\theta_i \\sim \\mathcal{N}(0,1) Simulates item difficulties, bjb_j, j‚àà{1,...,Nitems}j \\\\{1, ..., N_\\text{items}\\} bj‚àºùí©(0,1)b_j \\sim \\mathcal{N}(0,1) Simulates dichotomous item responses, xij‚àà{0,1}x_{ij} \\\\{0,1\\}, according 1PL item response function: P(xij=1|Œ∏i)=11+e‚àí(Œ∏i‚àíbj)P(x_{ij} = 1 | \\theta_i) = \\frac{1}{1+e^{-(\\theta_i - b_j)}} Clears seed calling set.seed(NULL), subsequent analysis determined data seed. Packages items returns inside list.","code":"data_default <- function(N_persons = 100, N_items = 50, data_seed = 242424) {   # note default behavior is fixed seed to ensure data consistency across runs   set.seed(data_seed)    theta_tru <- stats::rnorm(N_persons)   diff_tru <- stats::rnorm(N_items)    theta_mat <- matrix(     theta_tru,     nrow = N_persons,     ncol = N_items,     byrow = FALSE   )   diff_mat <- matrix(diff_tru, nrow = N_persons, ncol = N_items, byrow = TRUE)    p <- stats::plogis(theta_mat - diff_mat)   resp <- matrix(     stats::rbinom(length(p), 1, p),     nrow = N_persons,     ncol = N_items   ) |>     as.data.frame() |>     dplyr::mutate(id = 1:N_persons) |>     tidyr::pivot_longer(       tidyselect::starts_with('V'),       names_to = 'item',       values_to = 'resp',       names_prefix = 'V'     ) |>     dplyr::select(.data$id, .data$item, .data$resp) |>     dplyr::mutate(dplyr::across(tidyselect::everything(), as.numeric))    out <- list(resp = resp, theta_tru = theta_tru, diff_tru = diff_tru)   set.seed(NULL)   return(out) }"},{"path":"http://klintkanopka.com/meow/articles/data-generation.html","id":"final-important-note-on-setting-random-seeds","dir":"Articles","previous_headings":"","what":"Final important note on setting random seeds","title":"Data Generation","text":"data loader uses random number generation allow take random seed reproducibility, make sure clear seed end data loader calling set.seed(NULL). don‚Äôt, current version seed persist downstream simulation, full process become deterministic. Specifically, want compare multiple runs item selection /parameter update algorithm uses degree randomization applied dataset, failing clear seed end data loader make impossible.","code":""},{"path":"http://klintkanopka.com/meow/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Klint Kanopka. Author, maintainer. Sophia Deng. Author.","code":""},{"path":"http://klintkanopka.com/meow/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kanopka K, Deng S (2025). meow: Unified Framework Computer Adaptive Testing Simulations. R package version 0.1.0, http://klintkanopka.com/meow/.","code":"@Manual{,   title = {meow: Unified Framework for Computer Adaptive Testing Simulations},   author = {Klint Kanopka and Sophia Deng},   year = {2025},   note = {R package version 0.1.0},   url = {http://klintkanopka.com/meow/}, }"},{"path":"http://klintkanopka.com/meow/index.html","id":"meow","dir":"","previous_headings":"","what":"Unified Framework for Computer Adaptive Testing Simulations","title":"Unified Framework for Computer Adaptive Testing Simulations","text":"meow package conducting simulations computer adaptive testing (CAT). pitch meow framework facilitates reproducible comparisons different combinations data generating processes (DGPs), item selection algorithms, parameter update algorithms. functionalizing components treating modular use core simulation harness produces consistent outputs ggplot2-based visualization tools. goal expose structure component functions user, allowing implement custom DGPs, selection algorithms, update algorithms. Users also encouraged contribute function modules associated research projects, facilitating community interaction.","code":""},{"path":"http://klintkanopka.com/meow/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Unified Framework for Computer Adaptive Testing Simulations","text":"Interested users can install using:","code":"# install.packages(\"remotes\") remotes::install_github(\"klintkanopka/meow\")"},{"path":"http://klintkanopka.com/meow/reference/construct_adj_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs an item pool adjacency matrix. For an item pool with N items, this is an NxN matrix. The diagonal elements contain the number of times an item has been exposed. The off-diagonal elements contain the number of times the pair of items has been exposed to the same respondent. In general, this function is never called directly, but instead called within cat_simulation() calls. ‚Äî construct_adj_mat","title":"Constructs an item pool adjacency matrix. For an item pool with N items, this is an NxN matrix. The diagonal elements contain the number of times an item has been exposed. The off-diagonal elements contain the number of times the pair of items has been exposed to the same respondent. In general, this function is never called directly, but instead called within cat_simulation() calls. ‚Äî construct_adj_mat","text":"Constructs item pool adjacency matrix. item pool N items, NxN matrix. diagonal elements contain number times item exposed. -diagonal elements contain number times pair items exposed respondent. general, function never called directly, instead called within cat_simulation() calls.","code":""},{"path":"http://klintkanopka.com/meow/reference/construct_adj_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs an item pool adjacency matrix. For an item pool with N items, this is an NxN matrix. The diagonal elements contain the number of times an item has been exposed. The off-diagonal elements contain the number of times the pair of items has been exposed to the same respondent. In general, this function is never called directly, but instead called within cat_simulation() calls. ‚Äî construct_adj_mat","text":"","code":"construct_adj_mat(resp_cur, pers_tru, item_tru)"},{"path":"http://klintkanopka.com/meow/reference/construct_adj_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs an item pool adjacency matrix. For an item pool with N items, this is an NxN matrix. The diagonal elements contain the number of times an item has been exposed. The off-diagonal elements contain the number of times the pair of items has been exposed to the same respondent. In general, this function is never called directly, but instead called within cat_simulation() calls. ‚Äî construct_adj_mat","text":"resp_cur long-form dataframe observed item responses. pers_tru dataframe true respondent abilities. item_tru dataframe true item parameters.","code":""},{"path":"http://klintkanopka.com/meow/reference/construct_adj_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs an item pool adjacency matrix. For an item pool with N items, this is an NxN matrix. The diagonal elements contain the number of times an item has been exposed. The off-diagonal elements contain the number of times the pair of items has been exposed to the same respondent. In general, this function is never called directly, but instead called within cat_simulation() calls. ‚Äî construct_adj_mat","text":"adjacency matrix type matrix.","code":""},{"path":"http://klintkanopka.com/meow/reference/data_existing.html","id":null,"dir":"Reference","previous_headings":"","what":"Load data from existing files ‚Äî data_existing","title":"Load data from existing files ‚Äî data_existing","text":"data_existing() wrapper three separate calls read.csv() packages output object used meow_sim().","code":""},{"path":"http://klintkanopka.com/meow/reference/data_existing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load data from existing files ‚Äî data_existing","text":"","code":"data_existing(resp_path, pers_path, item_path)"},{"path":"http://klintkanopka.com/meow/reference/data_existing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load data from existing files ‚Äî data_existing","text":"resp_path file path long form .csv file. File three columns, id contains numeric respondent identifier, item contains numeric item identifier, resp contains item response. sure form item response comports parameter update functions choose use. pers_path file path wide form .csv file contains true person parameter values, one person per row. Include person index column, named id. Default column name unidimensional person ability theta item_path file path wide form .csv file contains true item parameter values, one item per row. Include item index column, named item. Default column names difficulty b default column name discrimination ,","code":""},{"path":"http://klintkanopka.com/meow/reference/data_existing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load data from existing files ‚Äî data_existing","text":"list three components: dataframe item response named resp, dataframe true person parameters named pers_tru, dataframe true item parameters named item_tru","code":""},{"path":"http://klintkanopka.com/meow/reference/data_simple_1pl.html","id":null,"dir":"Reference","previous_headings":"","what":"A default data generation function that simulates normally distributed respondent abilities and item difficulties ‚Äî data_simple_1pl","title":"A default data generation function that simulates normally distributed respondent abilities and item difficulties ‚Äî data_simple_1pl","text":"data_simple_1pl() constructs data according simple one parameter logistic IRT model. user may specify number persons, number items, random seed reproducibility. Person abilities item difficulties drawn standard normal.","code":""},{"path":"http://klintkanopka.com/meow/reference/data_simple_1pl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A default data generation function that simulates normally distributed respondent abilities and item difficulties ‚Äî data_simple_1pl","text":"","code":"data_simple_1pl(N_persons = 100, N_items = 50, data_seed = 242424)"},{"path":"http://klintkanopka.com/meow/reference/data_simple_1pl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A default data generation function that simulates normally distributed respondent abilities and item difficulties ‚Äî data_simple_1pl","text":"N_persons Number respondents simulate N_items Number items simulate data_seed random seed generating reproducible data. seed re-initialized end data generation process","code":""},{"path":"http://klintkanopka.com/meow/reference/data_simple_1pl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A default data generation function that simulates normally distributed respondent abilities and item difficulties ‚Äî data_simple_1pl","text":"list three components: dataframe item response named resp, dataframe true person parameters named pers_tru, dataframe true item parameters named item_tru","code":""},{"path":"http://klintkanopka.com/meow/reference/meow_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Conducts a full CAT simulation. ‚Äî meow_sim","title":"Conducts a full CAT simulation. ‚Äî meow_sim","text":"Conducts full CAT simulation.","code":""},{"path":"http://klintkanopka.com/meow/reference/meow_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conducts a full CAT simulation. ‚Äî meow_sim","text":"","code":"meow_sim(   select_fun,   update_fun,   data_loader,   select_args = list(),   update_args = list(),   data_args = list(),   init = NULL,   fix = \"none\" )"},{"path":"http://klintkanopka.com/meow/reference/meow_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conducts a full CAT simulation. ‚Äî meow_sim","text":"select_fun function specifies item selection algorithm. update_fun function specifies parameter update algorithm. data_loader function specifies data generating process. select_args named list arguments passed select_fun. update_args named list arguments passed update_fun. data_args named list arguments passed data_loader. init list initialization values estimated person item parameters. Currently accepts named list two entities: pers item, initial estimated values ability difficulty, respectively. Defaults NULL, initializes estimated parameters zero. fix estimated parameters treat fixed. Currently defaults none, accepts pers, item, .`","code":""},{"path":"http://klintkanopka.com/meow/reference/meow_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conducts a full CAT simulation. ‚Äî meow_sim","text":"list four named entities, results dataframe one row per iteration simulation. contains one iter iteration number two columns per person item parameter, one associated estimated parameter one bias estimate. Next list item-item adjacency matrices, contained adj_mats. One matrix provided per iteration simulation, edge weights number respondents responded pair items. Finally, true ability difficulty dataframes returned pers_tru item_tru.","code":""}]
